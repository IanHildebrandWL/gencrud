#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2020 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
#
from flask import Blueprint, request, jsonify
import webapp2.api as API
from common.sql import getSqlStatement
from ${ root.application }.${ obj.name }.model import ${ obj.cls }
from ${ root.application }.${ obj.name }.schema import ${ obj.name }Schema, ${ obj.name }sSchema
from ${ root.application }.common import fieldConversion
% if obj.Mixin.Python.hasView():
from ${obj.Mixin.Python.View.filename} import ${obj.Mixin.Python.View.cls}
% endif

db = API.db
${ obj.name }Api = Blueprint( '${ obj.name }Api', __name__ )


# Args is for downwards compatibility !!!!!
def registerApi( *args ):
    # Set the logger for the users module
    API.app.logger.info( 'Register ${ obj.cls } routes' )
    API.app.register_blueprint( ${ obj.name }Api )
    try:
        import ${ root.application }.${ obj.name }.entry_points  as EP
        API.app.logger.info( 'Register ${ obj.cls } entrypoint routes' )
        API.app.register_blueprint( EP.entryPointApi )

    except:
        pass

% if obj.Mixin.Python.hasView():
    API.app.logger.info( 'Registering ${ obj.cls } view mixin' )
    API.app.register_blueprint( ${obj.Mixin.Python.View.cls}.blueprint )
% endif
    # TODO: Here we need to add dynamically the menus for this module
    return

def removeGeneratedFieldsFromRecord( record ):
    for field in (
                    '${ obj.table.primaryKey }',
% for field in obj.table.columns:
%  if field.ui is not None:
%   if field.hasForeignKey() and field.ui.hasService():
                    '${ field.name }_FK',
%   elif field.hasResolveList():
                    '${ field.name }_LABEL',
%   endif
%  endif
% endfor
                                                ):
        if field in record:
            del record[ field ]

    return record


@${ obj.name }Api.route( '${ obj.uri }/list/<id>/<value>', methods=[ 'GET' ] )
def get${ obj.cls }ListFiltered( id, value ):
    filter = { id: value }
    recordList = db.session.query( ${ obj.cls } ).filter_by( **filter ).${ obj.orderBy() }.all()
    result = ${ obj.name }sSchema.jsonify( recordList )
    API.app.logger.debug( 'get${ obj.cls }List() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/list', methods=[ 'GET' ] )
def get${ obj.cls }List():
    recordList = db.session.query( ${ obj.cls } ).${ obj.orderBy() }.all()
    result = ${ obj.name }sSchema.jsonify( recordList )
    API.app.logger.debug( 'get${ obj.cls }List() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/new', methods = [ 'POST' ] )
def api${ obj.cls }New():
    data    = request.json
    if data is None:
        return "Invalid request, missing ${ obj.cls }Record", 500

    API.app.logger.info( 'POST: {0}'.format( repr( data ) ) )
    data = removeGeneratedFieldsFromRecord( data )
    record = ${ obj.cls }()
    for key, value in data.items():
        setattr( record, key, fieldConversion( record, key, value ) )

    API.db.session.add( record )
    API.db.session.commit()
    result = ${ obj.name }Schema.jsonify( record )
    API.app.logger.debug( 'get${obj.cls}New() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/get', methods = [ 'GET' ] )
def api${ obj.cls }Get():
    data    = request.json
    if data is None:
        return "Invalid request, missing ${ obj.cls }Record", 500

    API.app.logger.info( 'GET: {0}'.format( repr( data ) ) )
    record = ${ obj.cls }.query.get( int( data[ '${ obj.table.primaryKey }' ] ) )
    result = ${ obj.name }Schema.jsonify( record )
    API.app.logger.debug( 'get${ obj.cls }Get() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/get/<int:id>', methods = [ 'GET' ] )
def api${ obj.cls }GetId( id ):
    API.app.logger.info( 'GET: {0}'.format( id ) )
    record = ${ obj.cls }.query.get( int( id ) )
    result = ${ obj.name }Schema.jsonify( record )
    API.app.logger.debug( 'get${ obj.cls }Get() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/<int:id>', methods = [ 'DELETE' ] )
def api${ obj.cls }Delete( id ):
    API.app.logger.info( 'DELETE: {0}'.format( id ) )
    record = ${ obj.cls }.query.get( int( id ) )
    API.db.session.delete( record )
    API.db.session.commit()
    result = jsonify( ok = True )
    API.app.logger.debug( 'get${ obj.cls }Delete() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/put', methods=[ 'POST' ] )
def api${ obj.cls }Put():
    data    = request.json
    if data is None:
        return "Invalid request, missing ${ obj.cls }Record", 500

    API.app.logger.info( 'PUT: {0}'.format( repr( data ) ) )
    record = ${obj.cls}.query.get( data[ '${ obj.table.primaryKey }' ] )
    data = removeGeneratedFieldsFromRecord( data )
    for key, value in data.items():
        if key != '${ obj.table.primaryKey }' and not key.endswith( '_REL' ):
            setattr( record, key, fieldConversion( record, key, value ) )

    API.db.session.commit()
    result = ${ obj.name }Schema.jsonify( record )
    API.app.logger.debug( 'get${ obj.cls }Put() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/update', methods=[ 'POST' ] )
def api${ obj.cls }Patch():
    data    = request.json
    API.app.logger.info( 'PATCH: {0}'.format( repr( data ) ) )
    record = ${ obj.cls }.query.get( data[ '${ obj.table.primaryKey }' ] )
    data = removeGeneratedFieldsFromRecord( data )
    for key, value in data.items():
        if key != '${ obj.table.primaryKey }' and not key.endswith( '_REL' ):
            setattr( record, key, fieldConversion( record, key, value ) )

    API.db.session.commit()
    result = ${ obj.name }Schema.jsonify( record )
    API.app.logger.debug( 'get${ obj.cls }Patch() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( '${ obj.uri }/select', methods=[ 'GET' ] )
def api${ obj.cls }Select():
    labels = []
    data    = request.json
    API.app.logger.info( 'POST: {0}'.format( repr( data ) ) )
    if data is not None:
        value = data[ 'value' ]
        label = data[ 'label' ]
        if ',' in label:
            label, *labels = label.split( ',' )

        initialItem = data.get( 'initialItem', None )
        finalItem   = data.get( 'finalItem', None )

    else:
        value       = request.args.get( 'value', '${ obj.table.primaryKey }' )    # primary key
        # TODO: This should be the first TEXT field
        label       = request.args.get( 'label', '${ obj.table.columns[ 1 ].name }' )  # first field name
        initialItem = None
        finalItem   = None

    result = []
    q = db.session.query( ${ obj.cls } ).order_by( getattr( ${ obj.cls }, label ) )
    API.app.logger.debug( "api${ obj.cls }SQL: {}".format( getSqlStatement( q ) ) )
    for record in q.all():
        if len( labels ) > 0:
            fields = [ getattr( record, label ) for label in labels ]
            result.append( { 'value': getattr( record, value ),
                             'label': ' - '.join( fields ) } )

        else:
            result.append( { 'value': getattr( record, value ),
                             'label': getattr( record, label ) } )

    if initialItem is not None:
        result.insert( 0, initialItem )

    if finalItem is not None:
        result.append( finalItem )

    API.app.logger.debug( 'api${ obj.cls }Select => {0}'.format( result ) )
    return jsonify( result )


@${ obj.name }Api.route( '${ obj.uri }/lock', methods=[ 'POST' ] )
def api${ obj.cls }Lock():
    data    = request.json
    API.app.logger.info( 'LOCK: {0}'.format( repr( data ) ) )
    # TODO: This needs to be implemented for correct multiuser support

    return jsonify( { 'result': 'OK' } )


@${ obj.name }Api.route( '${ obj.uri }/unlock', methods=[ 'POST' ] )
def api${ obj.cls }Unlock():
    data    = request.json
    API.app.logger.info( 'UNLOCK: {0}'.format( repr( data ) ) )
    # TODO: This needs to be implemented for correct multiuser support

    return jsonify( { 'result': 'OK' } )
