/*
#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2019 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
*/
import { EventEmitter } from '@angular/core';
import { CrudDataSource } from '../../common/crud-datasource';
import { CrudDataService, PytSelectList } from '../../common/crud-dataservice';
import { MatPaginator, MatSort, PageEvent } from '@angular/material';
import { ${ obj.cls }Record } from './model';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
   % if field.hasService():
import { ${field.ui.service.cls} } from '${ field.ui.service.path }';
   % endif
 % endif
% endfor


export class ${ obj.cls }DataSource extends CrudDataSource<${ obj.cls }Record>
{
% for field in obj.table.columns:
 % if ( field.hasService() or field.hasResolveList() ) and ( field.ui.isChoice() or field.ui.isCombobox() ):
    ${ field.name }_List:  Array<PytSelectList>;
 % endif
% endfor
    constructor(   _databaseTable: CrudDataService<${ obj.cls }Record>
                 , _paginator: MatPaginator
                 , _sort: MatSort
                 , _event: EventEmitter<PageEvent>
                 , _backend_filter: any
${ obj.externalService } )
    {
        super( _databaseTable, _paginator, _sort, _event, _backend_filter );
% for field in obj.table.columns:
 % if ( field.hasService() or field.hasResolveList() ) and ( field.ui.isChoice() or field.ui.isCombobox() ):
        this.${ field.name }_List = new Array<PytSelectList>();
   % if field.hasService():
        this.${ field.ui.service.name }Service.getSelectList( '${ field.ui.service.value }', '${ field.ui.service.label }' ).subscribe( data => {
            this.${ field.name }_List = data
        } );
   % elif field.hasResolveList():
        this.${ field.name }_List = ${ field.ui.typescriptResolveList() }
   % endif

 % endif
% endfor
        let tmp = localStorage.getItem( '${ obj.cls }DataSource.filter' );
        if ( tmp !== null )
        {
            this.filter = tmp;
        }
        this._filterChange.subscribe( value => {
            localStorage.setItem( '${ obj.cls }DataSource.filter', value );
        } );
        return;
    }

    sortActive( active: string, a: any, b: any ) : string[] 
    {
        switch ( active ) 
        {
% for field in obj.table.listViewColumns:
        case '${ field.name }':
            return ( [ a.${ field.name }, b.${ field.name } ] );
% endfor
        }
        return ( [ null, null ] );        
    }

    public makeSearchString( record: any ) : string
    {
        return ( ( ${ obj.table.buildFilter() } ).toLowerCase() );
    }

% for field in obj.table.columns:
 % if field.hasService():
    public ${ field.name }_Label( id )
    {
        if ( this.${ field.name }_List.length )
        {
            return ( this.resolveListItem( this.${ field.name }_List, id ) );
        }
        return ( id.toString );
    }

 % elif field.hasResolveList():
    public ${ field.name }_Label( id )
    {
        let values = ${ field.ui.resolveList }
        return ( values[ id ] );
    }

 % endif
% endfor
}
