#
#   Python backend and Angular frontend code generation by Template
#   Copyright (C) 2018 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License as
#   published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with this library; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301 USA
#
#   Backend view for the ${obj.name} table, this is generated by the
#   gencrud.py module. When modifing the file make sure that you remove
#   the table from the configuration.
#
import logging
from flask import Blueprint
from flask import request
from applic.database import db
import flask.json as json
from ${ obj.application }.${ obj.name }.model import ${ obj.cls }
from ${ obj.application }.${ obj.name }.schema import ${ obj.name }Schema, ${ obj.name }sSchema

${ obj.name }Api = Blueprint( '${ obj.name }Api', __name__ )

logger = logging.getLogger()


def register( app, cors ):
    # Set the logger for the users module
    if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
        app.logger.info( 'Allowing CORS' )
        if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
            origins = app.config.get( 'CORS_ORIGIN_WHITELIST', '*' )
            cors.init_app( '${ obj.name }Api', origins = origins )

    app.register_blueprint( '${ obj.name }Api' )
    return


@${ obj.name }Api.route( "{ obj.uri }/list", methods=[ 'GET' ] )
def get${ obj.cls }List():
    recordList = db.session.query( ${obj.cls} ).order_by( ${obj.cls}.${obj.primaryKey} ).all()
    result = ${obj.name}sSchema.jsonify( recordList )
    logger.debug( 'get${obj.cls}List() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( "{obj.uri}/new", methods = [ 'POST' ] )
def api${ obj.cls }New():
    data    = request.json
    logging.info( 'POST: {0}'.format( repr( data ) ) )
    del data[ '${obj.primaryKey}' ]
    record = ${obj.cls}( **request.json )
    db.session.add( record )
    db.session.commit()
    result = ${obj.name}Schema.jsonify( role )
    logger.debug( 'get${obj.cls}New() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( "{ obj.uri }/get", methods = [ 'GET' ] )
def api${ obj.cls }Get():
    data    = request.json
    logging.info( 'GET: {0}'.format( repr( data ) ) )
    record = ${ obj.cls }.query.get( int( data[ '${ obj.primaryKey }' ] ) )
    result = ${ obj.name }Schema.jsonify( record )
    logger.debug( 'get${ obj.cls }Get() => {0}'.format( result ) )
    return result


@${ obj.name }Api.route( "{ obj.uri }/delete", methods = [ 'DELETE' ] )
def api${ obj.cls }Delete():
    data    = request.json
    logging.info( 'DELETE: {0}'.format( repr( data ) ) )
    record = ${ obj.cls }.query.get( int( data[ '${ obj.primaryKey }' ] ) )
    db.session.delete( record )
    db.session.commit()
    result = ${ obj.name }Schema.jsonify( record )
    logger.debug( 'get${ obj.cls }Delete() => {0}'.format( result ) )
    return result


@${obj.name}Api.route( "{obj.uri}/put", methods=['PUT'] )
def api${obj.cls}Put():
    data    = request.json
    logging.info( 'PUT: {0}'.format( repr( data ) ) )
    record = ${obj.cls}.query.get( data[ '${obj.primaryKey}' ] )
    for key, value in data.items():
        if key != '${obj.primaryKey}':
            setattr( record, key, value )

    db.session.commit()
    result = ${obj.name}Schema.jsonify( record )
    logger.debug( 'get${obj.cls}Put() => {0}'.format( result ) )
    return result


@${obj.name}Api.route( "{obj.uri}/update", methods=['PATCH'] )
def api${obj.cls}Patch():
    data    = request.json
    logging.info( 'PATCH: {0}'.format( repr( data ) ) )
    record = ${obj.cls}.query.get( data[ '${obj.primaryKey}' ] )
    for key, value in data.items():
        setattr( record, key, value )

    db.session.commit()
    result = ${obj.name}Schema.jsonify( record )
    logger.debug( 'get${obj.cls}Patch() => {0}'.format( result ) )
    return result