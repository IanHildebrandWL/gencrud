import { Component, OnInit, OnDestroy, Input } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { ${obj.cls}DataService } from './service';
import { ActivatedRoute, RouterLink, Router } from "@angular/router";
import { Subscribers } from 'src/app/common/subcribers';
import { ${obj.cls}Record } from './model';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
import { PytSelectList } from '../../common/crud-dataservice';
<%
    break
%>
 % endif
% endfor
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
   % if field.ui.service is not None:
import { ${ field.ui.service.cls } } from '${ field.ui.service.path }';
   % endif
 % endif
% endfor

@Component({
    selector: 'app-${obj.name}-screen',
    templateUrl: './screen.component.html'
})
export class Screen${obj.cls}Component extends Subscribers implements OnInit, OnDestroy
{
    // Base component
    public formControl: FormControl;
    public formGroup: FormGroup;
    public mode: string;
    public sub: any;
    @Input( 'id' )      id: any;
    @Input( 'value' )   value: any;
    protected debug: boolean = false;
% for field in obj.table.columns:
 % if field.ui is not None:
  % if field.ui.isPassword():
    public hide_${ field.name }: boolean  = true;
  % elif field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
    % if field.ui.service is not None:
      public ${ field.ui.service.name }List: PytSelectList[];
    % elif field.ui.hasResolveList():
      public ${ field.name }List = ${ field.ui.typescriptResolveList() }
    % endif
  % endif
 % endif
% endfor
    public isEditMode(): boolean
    {
        return ( this.mode === 'edit' );
    }

    public getErrorMessage( ctrl_name: any ) : string
    {
        let ctrl = null;
        if ( typeof ctrl_name === 'string' )
        {
            ctrl = this.formGroup.get( ctrl_name );
        }
        else
        {
            ctrl = ctrl_name;
        }
        if ( ctrl == null || ctrl.valid )
        {
            return ( '' );
        }
        if ( this.debug )
        {
            console.log( 'getErrorMessage( ctrl_name = "' + ctrl_name + '" )' );
        }
        let result = 'Unknown error';
        if ( ctrl.hasError( 'required' ) )
        {
            result = 'Required field';
        }
        else if ( ctrl.hasError( 'email' ) )
        {
            result = 'Not a valid email';
        }
        else if ( ctrl.hasError( 'maxlength' ) )
        {
            result = 'The data is too long, allowed (' + ctrl.errors.maxlength.requiredLength + ')';
        }
        else if ( ctrl.invalid )
        {
            console.log( result, ctrl );
        }
        if ( this.debug )
        {
            console.log( "getErrorMessage() => " + result );
        }
        return ( result );
    }

    // Specific to component
    public record: ${obj.cls}Record;

    constructor( private route: ActivatedRoute
               , private router: Router
               , public dataService: ${obj.cls}DataService
${ obj.externalService }  )
    {
        super();
        this.record = new ${obj.cls}Record();
        this.formGroup = new FormGroup( {
% for field in obj.table.columns:
%   if field.hasLabel():
            ${ field.name }: new FormControl( this.record.${ field.name },
                                              ${ field.validators } ),
%   endif
% endfor
        } );

        return;
    }

    ngOnInit()
    {
        if ( this.id === undefined || this.id === null )
        {
            this.registerSubscription( this.route.queryParams.subscribe( params => {
                console.log( params );
                this.id     = params.id;    // Contains the key field, currently only the primary key is supported.
                this.value  = params.value; // Contains val value for the key field.
                this.mode   = params.mode;  // edit or new, filter only supported on the table component.
            } ) );
        }
        this.registerSubscription( this.dataService.getRecordById( this.value ).subscribe( record => {
            this.record = record;
            this.formGroup.patchValue( {
% for field in obj.table.columns:
                ${ field.name }: record.${ field.name },
% endfor
            } );
            this.dataService.lockRecord( record );
        } ) );
% for field in obj.table.columns:
  % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
    % if field.ui.service is not None:
        this.registerSubscription( this.${ field.ui.service.name }Service.getSelectList( '${ field.ui.service.value }', '${ field.ui.service.label }' ).subscribe( dataList => {
            console.log( '${ field.ui.service.name }Service.getSelectList => ', dataList );
            this.${ field.ui.service.name }List = dataList;
        } ) );
    % endif
 % endif
% endfor
        return;
    }

    ngOnDestroy()
    {
        this.dataService.unlockRecord( this.record );
        super.ngOnDestroy();
        return;
    }

% for field in obj.table.columns:
    public get ${ field.name }()
    {
        return ( this.formGroup.get( '${ field.name }' ) );
    }

% endfor

    onSaveClick(): void
    {
        console.log( 'Dialog${obj.cls}Component.onSaveClick() => ', this.formGroup.value );
        if ( !this.isEditMode() )
        {
            this.dataService.addRecord( this.formGroup.value );
        }
        else
        {
            this.dataService.updateRecord( this.formGroup.value );
        }
        window.history.back();
        return;
    }

    onCancelClick(): void
    {
        window.history.back();
        return;
    }
}
