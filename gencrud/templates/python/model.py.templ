#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2019 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
#
from applic.database import db
from sqlalchemy import event
import common
% if obj.table.Mixin.Model.Available:
from ${obj.table.Mixin.Model.Module} import ${obj.table.Mixin.Model.Class}
% endif
${ obj.table.leadIn }


class ${obj.cls}( db.Model
% if obj.table.Mixin.Model.Available:
                , ${obj.table.Mixin.Model.Class}
% endif
                ):
    """Model for the ${obj.name} table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    __tablename__        = '${ obj.table.name }'
% for field in obj.table.columns:
    ${field.name + ' ' * ( 20 - len(field.name) )} = ${ field.sqlAlchemyDef() }
 % if field.hasRelationship():
    ${field.relationship.fieldName + ' ' * ( 20 - len(field.name) )} = db.relationship( "${ field.relationship.cls }",
                                     backref = "${ field.relationship.tableName }",
                                     lazy = ${ field.relationship.lazy } )
 % endif
% endfor

% for field in obj.table.columns:
 %if field.hasUniqueKey():
    db.UniqueConstraint( '${ field.name }', name='${field.uniqueKey}' )
 % endif
% endfor
% if obj.table.hasUniqueKey():
 % for index, fields in obj.table.uniqueKey.items():
    db.UniqueConstraint( ${ fields }, name='${ index }' )
 % endfor
% endif


% if obj.table.hasAutoUpdate:
# standard decorator style
@event.listens_for( ${obj.cls}, 'before_update')
def receive_before_commit( mapper, connection, record ):
% for field in obj.table.columns:
% if field.hasAutoUpdate:
    record.${ field.name } = ${ field.autoUpdate }
% endif
% endfor
    return
% endif