"""Backend view for the user table, this is generated by the gencrud.py module
When modifing the file make sure that you remove the table from the configuration.
"""
import logging
from flask import Blueprint
from flask import request
from applic.database import db
import flask.json as json
from testrun.user.model import User
from testrun.user.schema import userSchema, usersSchema

userApi = Blueprint( 'userApi', __name__ )

logger = logging.getLogger()


def register( app, cors ):
    # Set the logger for the users module
    if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
        app.logger.info( 'Allowing CORS' )
        if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
            origins = app.config.get( 'CORS_ORIGIN_WHITELIST', '*' )
            cors.init_app( 'userApi', origins = origins )

    app.register_blueprint( 'userApi' )
    return


@userApi.route( "{ obj.uri }/list", methods=[ 'GET' ] )
def getUserList():
    recordList = db.session.query( User ).order_by( User.D_USER_ID ).all()
    result = usersSchema.jsonify( recordList )
    logger.debug( 'getUserList() => {0}'.format( result ) )
    return result


@userApi.route( "{obj.uri}/new", methods = [ 'POST' ] )
def apiUserNew():
    data    = request.json
    logging.info( 'POST: {0}'.format( repr( data ) ) )
    del data[ 'D_USER_ID' ]
    record = User( **request.json )
    db.session.add( record )
    db.session.commit()
    result = userSchema.jsonify( role )
    logger.debug( 'getUserNew() => {0}'.format( result ) )
    return result


@userApi.route( "{ obj.uri }/get", methods = [ 'GET' ] )
def apiUserGet():
    data    = request.json
    logging.info( 'GET: {0}'.format( repr( data ) ) )
    record = User.query.get( int( data[ 'D_USER_ID' ] ) )
    result = userSchema.jsonify( record )
    logger.debug( 'getUserGet() => {0}'.format( result ) )
    return result


@userApi.route( "{ obj.uri }/delete", methods = [ 'DELETE' ] )
def apiUserDelete():
    data    = request.json
    logging.info( 'DELETE: {0}'.format( repr( data ) ) )
    record = User.query.get( int( data[ 'D_USER_ID' ] ) )
    db.session.delete( record )
    db.session.commit()
    result = userSchema.jsonify( record )
    logger.debug( 'getUserDelete() => {0}'.format( result ) )
    return result


@userApi.route( "{obj.uri}/put", methods=['PUT'] )
def apiUserPut():
    data    = request.json
    logging.info( 'PUT: {0}'.format( repr( data ) ) )
    record = User.query.get( data[ 'D_USER_ID' ] )
    for key, value in data.items():
        if key != 'D_USER_ID':
            setattr( record, key, value )

    db.session.commit()
    result = userSchema.jsonify( record )
    logger.debug( 'getUserPut() => {0}'.format( result ) )
    return result


@userApi.route( "{obj.uri}/update", methods=['PATCH'] )
def apiUserPatch():
    data    = request.json
    logging.info( 'PATCH: {0}'.format( repr( data ) ) )
    record = User.query.get( data[ 'D_USER_ID' ] )
    for key, value in data.items():
        setattr( record, key, value )

    db.session.commit()
    result = userSchema.jsonify( record )
    logger.debug( 'getUserPatch() => {0}'.format( result ) )
    return result
