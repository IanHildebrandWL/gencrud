<mat-card id="${ obj.name }.table" class="standard-container">
    <div>
		<div fxFlex fxLayout="row">
			<app-breadcrumb class="align-paginator" fxFlex="grow"></app-breadcrumb>
			<mat-paginator #top_paginator fxFlex="40"
							id="${ obj.name }.header.paginator"
							[length]="dataSource.filteredData.length"
							(page)="pagingEvent( $event )"
							[pageIndex]="pageIndex"
							[pageSize]="pageSize"
							[pageSizeOptions]="[5, 10, 25, 100]">
			</mat-paginator>
			<div class="align-paginator" fxFlex="none" fxLayoutAlign="end">
% for action in obj.actions.getHeaderButtons():
                ${ action.buttonObject() }
% endfor
% if obj.hasAutoUpdate():
                <button mat-icon-button color="primary" (click)="toggleAutoUpdate()" id="${ obj.name }.header.autoupdate">
                    <mat-icon *ngIf="toggleUpdate == false; else isAutoRefresh" aria-label="Autoupdate">update</mat-icon>
                    <ng-template #isAutoRefresh>
                        <mat-icon *ngIf="toggleUpdate" aria-label="Stop autoupdate">link_off</mat-icon>
                    </ng-template>
                </button>
% endif
				<app-help helpitem="${ obj.name }" fallback="table-overview" color="primary"></app-help>
				<button mat-icon-button color="primary"
							(click)="refresh()" id="${ obj.name }.header.refresh">
					<mat-icon aria-label="Refresh the view">refresh</mat-icon>
				</button>
			</div>
		</div>
	</div>
    <mat-card-content class="card-content">
        <mat-table id="${ obj.name }.table" #table${ obj.cls } [dataSource]="dataSource" matSort class="mat-cell" ${obj.table.sortedInfo()}>
% for field in obj.table.listViewColumns:
            <!-- ${ field.name } Column -->
            <ng-container matColumnDef="${ field.name }" class="column_${ field.name }">
                <mat-header-cell *matHeaderCellDef mat-sort-header>
                    <filter-header title="${ field.label }" field="${ field.name }"
									[filterRecord]="filterRecord"
									[dataSource]="dataSource"
									(applyFilter)="applyFilter( filterRecord )">
					</filter-header>
                </mat-header-cell>
                <mat-cell *matCellDef="let row; let i=index;" id="${ obj.cls }.${ field.name }" matTooltip="ID: {{ row.${field.name} }}"
                          ${ obj.actions.getRowRouterLink() }>
% if field.ui is not None:
%  if field.ui.hasService():
%   if field.hasAttribute( "NULL" ):
                    <div *ngIf="row.${ field.name }_FK !== null">{{ row.${ field.name }_FK.${ field.ui.service.label } }}</div>
                    <ng-template #elseBlock_${ field.name }_FK>N/A</ng-template>
%   else:
                    {{ row.${ field.name }_FK.${ field.ui.service.label } }}
%   endif
%  elif field.hasResolveList():
                    {{ row.${ field.name }_LABEL }}

%  elif field.ui.isUiType( 'date', 'datepicker', 'time', 'timepicker', 'datetime', 'datetimepicker' ) and field.ui.format != 'text':
                    {{ row.${ field.name } | date: "${ field.ui.format }" }}
%  elif field.ui.isUiType( 'datetime', 'datetimepicker' ):
                    {{ row.${ field.name } | date: "yyyy-MM-dd HH:mm:ss" }}
%  elif field.ui.isUiType( 'date', 'datepicker' ):
                    {{ row.${ field.name } | date: "yyyy-MM-dd" }}
%  elif field.ui.isUiType( 'time', 'timepicker' ):
                    {{ row.${ field.name } | date: "HH:mm:ss" }}
%  elif field.ui.pipe != '':
                    {{ dataSource.reFormat( row.${ field.name }, '${ field.ui.pipe }', '${ field.ui.format }' ) }}
%  else:
                    {{ row.${ field.name } }}
%  endif
% endif
                </mat-cell>
            </ng-container>
% endfor
            <!-- actions -->
            <ng-container matColumnDef="actions">
                <!-- Header buttons -->
                <mat-header-cell *matHeaderCellDef>
                    Options
                </mat-header-cell>
                <!-- Row buttons -->
                <mat-cell *matCellDef="let row; let i=index;" >
% for action in obj.actions.getCellButtons():
                    ${ action.buttonObject() }
% endfor
                </mat-cell>
            </ng-container>
            <mat-header-row *matHeaderRowDef="displayedColumns">
            </mat-header-row>
            <mat-row *matRowDef="let row; columns: displayedColumns;">
            </mat-row>
        </mat-table>
    </mat-card-content>
    <mat-card-footer style="margin-left: 5px; width: 100%;" >
		<div fxFlex fxLayout="row">
			<div fxFlex="grow">
				<div id="${ obj.name }.spinner" *ngIf="spinnerService.visibility | async as visibility; else loading_done" class="loading-progress">
					<mat-progress-bar mode="indeterminate"></mat-progress-bar>
				</div>
				<ng-template #loading_done>
					<div class="no-results" id="${ obj.name }.no-results"
							[style.display]="dataSource.renderedData.length == 0 ? '' : 'none'">
						No results
					</div>
				</ng-template>
			</div>
			<mat-paginator #bot_paginator fxFlex="40"
							id="${ obj.name }.botton.paginator"
							[length]="dataSource.filteredData.length"
							(page)="pagingEvent( $event )"
							[pageIndex]="pageIndex"
							[pageSize]="pageSize"
							[pageSizeOptions]="[5, 10, 25, 100]">
			</mat-paginator>
			<div class="align-paginator" fxFlex fxLayoutAlign="end">
% for action in obj.actions.getFooterButtons():
                ${ action.buttonObject() }
% endfor
				<button mat-icon-button color="primary"
				        id="${ obj.name }.botton.refresh"
						(click)="refresh()">
					<mat-icon aria-label="Refresh the view">refresh</mat-icon>
				</button>
			</div>
		</div>
	</mat-card-footer>
</mat-card>
