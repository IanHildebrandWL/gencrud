/*
#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2019 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
*/
import { NgModule, ModuleWithProviders } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Routes, Route } from '@angular/router';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CustomMaterialModule } from './../../material.module';
import { GenCrudModule } from './../../common/gencrud.module';
% for action in obj.actions.unique:
%  if action.position != 'none':
%   if action.type == 'dialog':
%    if action.name == 'delete':
import { Delete${ obj.cls }Dialog } from './delete.dialog';
%    else:
import { Dialog${ obj.cls }Component } from './dialog.component';
%    endif
%   elif action.isAngularRoute():
import { ${ action.route.cls } } from '${ action.route.module }';
%   else:
import { Screen${ obj.cls }Component } from './screen.component';
%   endif
%  endif
% endfor
import { ${ obj.cls }TableComponent } from './table.component';
import { ${ obj.cls }DataService } from './service';
% if obj.hasExtra():
%  for inp in obj.extra.getTypeScriptInports( 'module' ):
import { ${ inp.module } } from '${ inp.path }';
%  endfor
%  for inp in obj.extra.getTypeScriptComponents( 'module' ):
import { ${ inp.component } } from '${ inp.path }';
%  endfor
% endif

/*
*   This Route in injected into the app-routing.module. Instead of at least 4 components that are added
*   to the app-routing.module.ts it injects it in the main route definition through is module.
*/
export const ${ obj.name }Route: Route = {
% if root.options.lazyLoading:
    path:           '',
% else:
    path:           '${ obj.menu.activateItem() }',
% endif

    data:
    {
        breadcrumb: '${ obj.title }',
        title:      '${ obj.title }'
    },
    children: [
        {
            path: '',
            component: ${ obj.cls }TableComponent,
            data:
            {
                breadcrumb: '',
                title:      ''
            }
        },
% for action in obj.actions:
%  if action.type == 'screen' and action.position != 'none':
        {
            path: '${ action.name }',
%   if action.isAngularRoute():
            component: ${ action.route.cls },
%   else:
            component: Screen${ obj.cls }Component,
%   endif
            data:
            {
                breadcrumb: '${ action.label }',
                title:      '${ action.label }'
            }
        },
%  endif
% endfor
    ]
}

/*
*   This NgModule is injected in the app-module.ts. This deals with declaring, importing,
*   creating entry point and providing the services for the ${ obj.name } screens and dialogs.
*
*   This don't clutter the app-module.ts, instead of at least 4 components that are added to the app-module.ts
*   it only adds this module and includes it in the import section.
*/
@NgModule( {
    declarations: [
% if ( obj.actions.get( 'new' ).type == 'dialog' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'dialog' and obj.actions.get( 'edit' ).position != 'none' ):
        Dialog${ obj.cls }Component,
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
        Delete${ obj.cls }Dialog,
% endif
% if ( obj.actions.get( 'new' ).type == 'screen' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'screen' and obj.actions.get( 'edit' ).position != 'none' ):
        Screen${ obj.cls }Component,
% endif
        ${ obj.cls }TableComponent,
% if obj.hasExtra():
%  for inp in obj.extra.getTypeScriptComponents( 'module' ):
        ${ inp.component },
%  endfor
% endif
    ],
    entryComponents: [
% if ( obj.actions.get( 'new' ).type == 'dialog' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'dialog' and obj.actions.get( 'edit' ).position != 'none' ):
        Dialog${ obj.cls }Component,
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
        Delete${ obj.cls }Dialog,
% endif
    ],
    providers: [
        ${ obj.cls }DataService
    ],
    imports: [
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        CustomMaterialModule,
        GenCrudModule,
% if obj.hasExtra():
%  for inp in obj.extra.getTypeScriptInports( 'module' ):
        ${ inp.module },
%  endfor
% endif
        RouterModule.forChild( [ ${ obj.name }Route ] )
    ],
    exports: [
% if ( obj.actions.get( 'new' ).type == 'screen' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'screen' and obj.actions.get( 'edit' ).position != 'none' ):
        Screen${ obj.cls }Component,
% endif
% if ( obj.actions.get( 'new' ).type == 'dialog' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'dialog' and obj.actions.get( 'edit' ).position != 'none' ):
        Dialog${ obj.cls }Component,
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
        Delete${ obj.cls }Dialog,
% endif
        ${ obj.cls }TableComponent,
% if obj.hasExtra():
%  for inp in obj.extra.getTypeScriptComponents( 'module' ):
        ${ inp.component },
%  endfor
% endif
    ]
} )
export class ${ obj.cls }Module
{
    static forRoot(): ModuleWithProviders {
        return {
            ngModule: ${ obj.cls }Module,
            providers: [
                ${ obj.cls }DataService
            ]
        }
    }
    static forChild(): ModuleWithProviders
    {
        return { ngModule: ${ obj.cls }Module };
    }
}
