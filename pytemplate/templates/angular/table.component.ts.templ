/*
*   Python backend and Angular frontend code generation by gencrud
*   Copyright (C) 2018 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
*
*   This library is free software; you can redistribute it and/or modify
*   it under the terms of the GNU Library General Public License GPL-2.0-only
*   as published by the Free Software Foundation; either version 2 of the
*   License, or (at your option) any later version.
*
*   This library is distributed in the hope that it will be useful, but
*   WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
*   Library General Public License for more details.
*
*   You should have received a copy of the GNU Library General Public
*   License GPL-2.0-only along with this library; if not, write to the
*   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
*   Boston, MA 02110-1301 USA
*
*   Frontend view for the ${ obj.name } table, this is generated by the
*   gencrud.py module. When modifing the file make sure that you remove
*   the table from the configuration.
*/
import { Component, ElementRef, OnInit, ViewChild, EventEmitter } from '@angular/core';
import { Router, ActivatedRoute } from  '@angular/router';
import { Location } from  '@angular/common';
import { HttpClient } from '@angular/common/http';
import { MatDialog, MatPaginator, MatSort, PageEvent } from '@angular/material';
import { fromEvent } from 'rxjs';
import { ${ obj.cls }Record } from './model';
% if ( obj.actions.get( 'new' ).type == 'dialog' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'dialog' and obj.actions.get( 'edit' ).position != 'none' ):
import { AddEdit${ obj.cls }Dialog } from './addedit.dialog';
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
import { Delete${ obj.cls }Dialog } from './delete.dialog';
% endif
import { ${ obj.cls }DataService } from './service';
import { ${ obj.cls }DataSource } from './datasource';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
   % if field.ui.service is not None:
import { ${field.ui.service.cls} } from '${ field.ui.service.path }';
   % endif
 % endif
% endfor

@Component({
    selector: 'app-${ obj.name }-table',
    templateUrl: './table.component.html',
    styleUrls: ['./table.component.scss']
})
export class ${ obj.cls }TableComponent implements OnInit
{
    displayedColumns = [
% for field in obj.table.listViewColumns:
                            '${ field.name }',
% endfor
                            'actions'
                        ];

    dataSource:         ${ obj.cls }DataSource  | null;
    index:              number;
    id:                 number;
    private sub:        any;
    public mode:        string;
    private backendFilter: any = null;
    public pageSize:    number = 10;
    public pageIndex:   number = 0;
    public paginatorEvent: EventEmitter<PageEvent>;
    @ViewChild( 'bot_paginator' )   bot_paginator: MatPaginator;
    @ViewChild( 'top_paginator' )   top_paginator: MatPaginator;
    @ViewChild( MatSort )       sort: MatSort;
    @ViewChild( 'filter' )      filter: ElementRef;

    constructor( public httpClient: HttpClient
                 , private route: ActivatedRoute
                 , private location: Location
                 , public dialog: MatDialog
                 , public router: Router
                 , public dataService: ${ obj.cls }DataService
% if obj.table.hasViewSizeService:
                 , public viewSizeService: ${ obj.table.viewSize }
% endif
${ obj.externalService } )
    {
% if obj.table.hasViewSizeValue:
        this.pageSize = ${ obj.table.viewSize }
% endif
        this.paginatorEvent = new EventEmitter<PageEvent>();
        return;
    }

    public ngOnInit(): void
    {
        this.sub = this.route.params.subscribe( params => {
            // (+) converts string 'id' to a number
            this.mode = params[ 'mode' ];
            this.backendFilter = {
                id: params[ 'id' ],
                value: params[ 'value' ]
            }
            // In a real app: dispatch action to load the details here.
        } );
        console.log( 'ngOnInit: backendFilter', this.backendFilter );
        this.loadData();
% if obj.table.hasViewSizeService:
        this.pageSize = viewSizeService.getViewSize();
% endif
% if obj.table.viewSort is not None:
        ${ obj.table.viewSort.injectAngular() }
% endif
        return;
    }

    public refresh(): void
    {
        this.dataSource.connect();
        return;
    }

% if obj.actions.get( 'new' ).position != 'none':
%   if obj.actions.get( 'new' ).type == 'screen':
    public screenAddNew(): void
    {
        this.router.navigate( [ '${obj.name}\add', { id: 0, mode: 'new' } ] );
        return;
    }

%   endif
%   if obj.actions.get( 'new' ).type == 'dialog':
    public addNew(): void
    {
        console.log("function addNew() deprecated use dialogAddNew()" )
        this.dialogAddNew()
    }

    public dialogAddNew(): void
    {
        let record: ${ obj.cls }Record = new ${ obj.cls }Record;
        console.log( 'addNew ', record );
        const dialogRef = this.dialog.open( AddEdit${ obj.cls }Dialog,
        {
            data: { record: record,
                    mode: 'add' },
        } );
        let height: number = ( 6 * 72 ) + 130;
        dialogRef.afterClosed().subscribe( result => 
        {
            console.log( 'addNew() dialog result ', result );
            if ( result === 1 ) 
            {
                // After dialog is closed we're doing frontend updates
                this.refreshTable();
            }
        } );
        dialogRef.updateSize( '85%', height.toString() + 'px' );
        return;
    }

%   endif
% endif
% if obj.actions.get( 'edit' ).position != 'none':
%   if obj.actions.get( 'edit' ).type == 'screen':
    public screenEditRecord( i: number, row: ${obj.cls}Record ): void
    {
        this.router.navigate( [ '${obj.name}\edit', { id: row.${obj.table.primaryKey}, mode: 'edit' } ] );
        return;
    }

%   elif obj.actions.get( 'edit' ).type == 'dialog':
    public startEdit( i: number, record: ${obj.cls}Record ): void
    {
        // Downwards compatility
        console.log("function startEdit() deprecated use dialogEditRecord()" );
        this.dialogEditRecord( i, record );
        return;
    }

    public dialogEditRecord( i: number, record: ${ obj.cls}Record ): void
    {
        this.dataService.lockRecord( record );
        this.id = record.${ obj.table.primaryKey };
        let height: number = ( 6 * 72 ) + 190;
        const dialogRef = this.dialog.open( AddEdit${ obj.cls }Dialog,
        {
            data: { record:     record, 
                    mode:       'edit' },
        } );
        dialogRef.updateSize( '85%', height.toString() + 'px' );
        dialogRef.afterClosed().subscribe( result => 
        {
            console.log( 'startEdit() dialog result ', result );
            if ( result === 1 ) 
            {
                // When using an edit things are little different,
                // firstly we find record inside DataService by id
                const foundIndex = this.dataService.dataChange.value.findIndex( x => x.${ obj.table.primaryKey } === this.id );
                console.log( 'startEdit() updating index ', foundIndex );
                // Then you update that record using data from
                // dialogData (values you entered)
                this.dataService.dataChange.value[ foundIndex ] = this.dataService.getDialogData();
                // And lastly refresh table
                this.refreshTable();
            }
            else
            {
                this.dataService.unlockRecord( record );
            }
        } );
        return;
    }

%   endif
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
    public deleteItem( i: number, record: ${ obj.cls }Record, field_name: string ): void
    {
        // Downwards compatility
        console.log("function deleteItem() deprecated use deleteRecord()" )
        this.dialogDeleteRecord( i, record, field_name );
        return
    }

    public dialogDeleteRecord( i: number, record: ${ obj.cls }Record, field_name: string ): void
    {
        this.dataService.lockRecord( record );
        this.id = record.${ obj.table.primaryKey };
        console.log( 'deleteItem ', record );
        const dialogRef = this.dialog.open( Delete${ obj.cls }Dialog,
        {
            data: { record: record,
                     field: record[ field_name ] || null,
                     mode: 'delete' }
        } );

        dialogRef.afterClosed().subscribe( result => 
        {
            console.log( 'deleteItem() dialog result ', result );
            if ( result === 1 ) 
            {
                const foundIndex = this.dataService.dataChange.value.findIndex( x =>
                                    x.${ obj.table.primaryKey } === this.id );
                console.log( 'deleteItem() removing index ', foundIndex );
                this.dataService.dataChange.value.splice( foundIndex, 1 );
                this.refreshTable();
            }
            else
            {
                this.dataService.unlockRecord( record );
            }
        } );
        return;
    }

% endif
    public pagingEvent( $event )
    {
        this.pageSize = $event.pageSize;
        this.bot_paginator.length = $event.length;
        this.bot_paginator.pageSize = $event.pageSize;
        this.bot_paginator.pageIndex = $event.pageIndex;
        this.top_paginator.length = $event.length;
        this.top_paginator.pageSize = $event.pageSize;
        this.top_paginator.pageIndex = $event.pageIndex;

        this.paginatorEvent.emit( $event );
        return ( $event );
    }

    private refreshTable(): void
    {
        this.bot_paginator._changePageSize( this.bot_paginator.pageSize );
        return;
    }

    public loadData(): void
    {
        this.dataSource = new ${ obj.cls }DataSource( this.dataService
                                                , this.bot_paginator
                                                , this.sort
                                                , this.paginatorEvent
                                                , this.backendFilter
% for field in obj.table.columns:
  % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
    % if field.ui.service is not None:
                                                , this.${field.ui.service.name}Service
    % endif
  % endif
% endfor
                                                );
        fromEvent( this.filter.nativeElement, 'keyup' ).subscribe( () => {
            if ( !this.dataSource ) 
            {
                return;
            }
            this.dataSource.filter = this.filter.nativeElement.value;
        });
    }
}
