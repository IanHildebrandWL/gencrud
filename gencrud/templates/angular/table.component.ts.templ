/*
#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2020 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
*/
import { Component, ElementRef, OnInit, OnDestroy, ViewChild, EventEmitter, Input } from '@angular/core';
import { Router, ActivatedRoute } from  '@angular/router';
import { HttpClient } from '@angular/common/http';
import { MatDialog } from '@angular/material/dialog';
import { SpinnerService } from '../../common/spinner-service';
import { TableBaseComponent } from '../../common/crud-table-component'
import { ${ obj.cls }Record } from './model';
% if ( obj.actions.get( 'new' ).type == 'dialog' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'dialog' and obj.actions.get( 'edit' ).position != 'none' ):
import { Dialog${ obj.cls }Component } from './dialog.component';
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
import { Delete${ obj.cls }Dialog } from './delete.dialog';
% endif
import { ${ obj.cls }DataService } from './service';
import { ${ obj.cls }DataSource } from './datasource';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
   % if field.ui.service is not None:
import { ${field.ui.service.cls} } from '${ field.ui.service.path }';
   % endif
 % endif
% endfor


@Component({
    selector: 'app-${ obj.name }-table',
    templateUrl: './table.component.html',
    styleUrls: ['./table.component.scss']
})
export class ${ obj.cls }TableComponent extends TableBaseComponent<${ obj.cls }Record> implements OnInit, OnDestroy
{
    displayedColumns = [
% for field in obj.table.listViewColumns:
                            '${ field.name }',
% endfor
% if obj.actions.hasRowButtons():
                            'actions'
% endif
                        ];
    constructor( public httpClient: HttpClient
                 , public route: ActivatedRoute
                 , public dialog: MatDialog
                 , public router: Router
                 , public dataService: ${ obj.cls }DataService
                 , public spinnerService: SpinnerService
% if obj.table.hasViewSizeService:
                 , public viewSizeService: ${ obj.table.viewSize }
% endif
${ obj.externalService } )
    {
        super( '${ obj.cls }Table',
% if obj.actions.get( 'edit' ).position != 'none' and obj.actions.get( 'edit' ).type == 'dialog':
                Dialog${ obj.cls }Component,
% else:
                null,
% endif
% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
                Delete${ obj.cls }Dialog,
% else:
                null,
% endif
                route,
                dialog,
                dataService );
        return;
    }

% if obj.actions.get( 'delete' ).position != 'none' and obj.actions.get( 'delete' ).type == 'dialog':
    public deleteRecord( i: number, record: ${ obj.cls }Record, field_name: string = null ): void
    {
        super.deleteRecord( i, record, field_name, record.${ obj.table.primaryKey } );
    }

% endif
    public loadData(): void
    {
        this.dataSource = new ${ obj.cls }DataSource( this.dataService
                                                , this.bot_paginator
                                                , this.sort
                                                , this.paginatorEvent
                                                , this.backendFilter
% for field in obj.table.columns:
  % if field.ui is not None and field.ui.hasService():
                                                , this.${field.ui.service.name}Service
  % endif
% endfor
                                               );
        return;
    }

    public newRecord()
    {
        return ( new ${ obj.cls }Record );
    }

    public setFilter( filter: string )
    {
        this.dataSource.filter = filter;
        return;
    }

    public lockRecord( record: ${ obj.cls }Record ): void
    {
        this.dataService.lockRecord( record );
        return;
    }

    public unlockRecord( record: ${ obj.cls }Record ): void
    {
        this.dataService.unlockRecord( record );
        return;
    }
}
