/*
*
*   Python backend and Angular frontend code generation by gencrud
*   Copyright (C) 2018 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
*
*   This library is free software; you can redistribute it and/or modify
*   it under the terms of the GNU Library General Public License as
*   published by the Free Software Foundation; either version 2 of the
*   License, or (at your option) any later version.
*
*   This library is distributed in the hope that it will be useful, but
*   WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
*   Library General Public License for more details.
*
*   You should have received a copy of the GNU Library General Public
*   License along with this library; if not, write to the Free Software
*   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
*   MA 02110-1301 USA
*
*   Frontend view for the ${ obj.name } table, this is generated by the
*   gencrud.py module. When modifing the file make sure that you remove
*   the table from the configuration.
*
*/
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { Component, Inject } from '@angular/core';
import { FormControl, Validators, FormGroup } from '@angular/forms';
import { BaseDialog } from '../../common/dialog';
import { ${ obj.cls }DataService } from './service';


@Component({
    selector: 'app-${ obj.name }-addedit-dialog',
    templateUrl: './addedit.dialog.html',
    styleUrls: ['../../common/dialog.scss']
})
export class AddEdit${ obj.cls }Dialog extends BaseDialog
{
% for field in obj.table.columns:
 % if field.isPassword():
    public hide_${ field.name }: boolean  = true;
 % endif
% endfor

    constructor( dialogRef: MatDialogRef<AddEdit${ obj.cls }Dialog>,
                 @Inject( MAT_DIALOG_DATA ) public data: any, 
                 dataService: ${ obj.cls }DataService )
    { 
        super( dialogRef, dataService, data.mode );
        if ( !this.isEditMode() )
        {
            data.id = 'New';
        }
        this.formGroup = new FormGroup( {
% for field in obj.table.columns:
            ${ field.name }: new FormControl( data.record.${ field.name },
                                              ${ field.validators } ),
% endfor
        } );
        return;
    }

% for field in obj.table.columns:
    public get ${ field.name }()
    {
        return ( this.formGroup.get( '${ field.name }' ) );
    }

% endfor

    onSaveClick(): void
    {
        console.log( "AddEdit${ obj.cls }Dialog.onSaveClick() => ", this.formGroup.value );
        if ( !this.isEditMode() )
        {
            this.dataService.addRecord( this.formGroup.value );
        }
        else
        {
            this.dataService.updateRecord( this.formGroup.value );
        }
        super.onSaveClick();
        return;
    }
}
