"""Backend view for the role table, this is generated by the gencrud.py module
When modifing the file make sure that you remove the table from the configuration.
"""
import logging
from flask import Blueprint
from flask import request
from applic.database import db
import flask.json as json
from testrun.role.model import Role
from testrun.role.schema import roleSchema, rolesSchema

roleApi = Blueprint( 'roleApi', __name__ )

logger = logging.getLogger()


def register( app, cors ):
    # Set the logger for the users module
    if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
        app.logger.info( 'Allowing CORS' )
        if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
            origins = app.config.get( 'CORS_ORIGIN_WHITELIST', '*' )
            cors.init_app( 'roleApi', origins = origins )

    app.register_blueprint( 'roleApi' )
    return


@roleApi.route( "{ obj.uri }/list", methods=[ 'GET' ] )
def getRoleList():
    recordList = db.session.query( Role ).order_by( Role.D_ROLE_ID ).all()
    result = rolesSchema.jsonify( recordList )
    logger.debug( 'getRoleList() => {0}'.format( result ) )
    return result


@roleApi.route( "{obj.uri}/new", methods = [ 'POST' ] )
def apiRoleNew():
    data    = request.json
    logging.info( 'POST: {0}'.format( repr( data ) ) )
    del data[ 'D_ROLE_ID' ]
    record = Role( **request.json )
    db.session.add( record )
    db.session.commit()
    result = roleSchema.jsonify( role )
    logger.debug( 'getRoleNew() => {0}'.format( result ) )
    return result


@roleApi.route( "{ obj.uri }/get", methods = [ 'GET' ] )
def apiRoleGet():
    data    = request.json
    logging.info( 'GET: {0}'.format( repr( data ) ) )
    record = Role.query.get( int( data[ 'D_ROLE_ID' ] ) )
    result = roleSchema.jsonify( record )
    logger.debug( 'getRoleGet() => {0}'.format( result ) )
    return result


@roleApi.route( "{ obj.uri }/delete", methods = [ 'DELETE' ] )
def apiRoleDelete():
    data    = request.json
    logging.info( 'DELETE: {0}'.format( repr( data ) ) )
    record = Role.query.get( int( data[ 'D_ROLE_ID' ] ) )
    db.session.delete( record )
    db.session.commit()
    result = roleSchema.jsonify( record )
    logger.debug( 'getRoleDelete() => {0}'.format( result ) )
    return result


@roleApi.route( "{obj.uri}/put", methods=['PUT'] )
def apiRolePut():
    data    = request.json
    logging.info( 'PUT: {0}'.format( repr( data ) ) )
    record = Role.query.get( data[ 'D_ROLE_ID' ] )
    for key, value in data.items():
        if key != 'D_ROLE_ID':
            setattr( record, key, value )

    db.session.commit()
    result = roleSchema.jsonify( record )
    logger.debug( 'getRolePut() => {0}'.format( result ) )
    return result


@roleApi.route( "{obj.uri}/update", methods=['PATCH'] )
def apiRolePatch():
    data    = request.json
    logging.info( 'PATCH: {0}'.format( repr( data ) ) )
    record = Role.query.get( data[ 'D_ROLE_ID' ] )
    for key, value in data.items():
        setattr( record, key, value )

    db.session.commit()
    result = roleSchema.jsonify( record )
    logger.debug( 'getRolePatch() => {0}'.format( result ) )
    return result
