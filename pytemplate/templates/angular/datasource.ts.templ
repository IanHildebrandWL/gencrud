/*
*
*   Python backend and Angular frontend code generation by gencrud
*   Copyright (C) 2018 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
*
*   This library is free software; you can redistribute it and/or modify
*   it under the terms of the GNU Library General Public License as
*   published by the Free Software Foundation; either version 2 of the
*   License, or (at your option) any later version.
*
*   This library is distributed in the hope that it will be useful, but
*   WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
*   Library General Public License for more details.
*
*   You should have received a copy of the GNU Library General Public
*   License along with this library; if not, write to the Free Software
*   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
*   MA 02110-1301 USA
*
*   Frontend view for the ${ obj.name } table, this is generated by the
*   gencrud.py module. When modifing the file make sure that you remove
*   the table from the configuration.
*
*/

import { CrudDataSource } from '../../common/crud-datasource';
import { CrudDataService } from '../../common/crud-dataservice';
import { MatPaginator, MatSort } from '@angular/material';
import { ${ obj.cls }Record } from './model';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
import { ${field.ui.service.cls} } from '${ field.ui.service.path }';
 % endif
% endfor


export class ${ obj.cls }DataSource extends CrudDataSource<${ obj.cls }Record>
{
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
    ${ field.name }_List:  Array<string>;
 % endif
% endfor
    constructor(   _databaseTable: CrudDataService<${ obj.cls }Record>
                 , _paginator: MatPaginator
                 , _sort: MatSort
${ obj.externalService } )
    {
        super( _databaseTable, _paginator, _sort );
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
        this.${ field.name }_List = new Array<string>();
        this.${ field.ui.service.name }Service.getSelectionList( '${ field.ui.service.value }',
                                                '${ field.ui.service.label }' ).subscribe( data => this.${ field.name }_List = data );
 % endif
% endfor
        return;
    }

    sortActive( active: string, a: any, b: any ) : string[] 
    {
        switch ( active ) 
        {
% for field in obj.table.listViewColumns:
        case '${ field.name }':
            return ( [ a.${ field.name }, b.${ field.name } ] );
% endfor
        }
        return ( [ null, null ] );        
    }

    public makeSearchString( record: any ) : string
    {
        return ( ( ${ obj.table.buildFilter() } ).toLowerCase() );
    }

% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
    public ${ field.name }_Label( id )
    {
        if ( id < this.${ field.name }_List.length )
        {
            return ( this.${ field.name }_List[ id ] );
        }
        return ( id.toString );
    }

 % elif field.ui is not None and ( field.ui.isCheckbox() or field.ui.isSliderToggle() ):
  %if field.hasResolveList():
    public ${ field.name }_Label( id )
    {
        let values = ${ field.listview.resolveList };
        return ( values[ id ] );
    }

  % endif
 % endif
% endfor
}
