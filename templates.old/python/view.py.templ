"""Backend view for the ${name} table, this is generated by the gencrud.py module
When modifing the file make sure that you remove the table from the configuration.
"""
import logging
from flask import Blueprint
from flask import request
from applic.database import db
import flask.json as json

from ${application}.${name}.model import ${cls}
from ${application}.${name}.schema import ${name}Schema, ${name}sSchema

${name}Api = Blueprint( '${name}Api', __name__ )

logger = logging.getLogger()




def register( app, cors ):
    # Set the logger for the users module
    if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
        app.logger.info( 'Allowing CORS' )
        if app.config.get( 'ALLOW_CORS_ORIGIN', False ):
            origins = app.config.get( 'CORS_ORIGIN_WHITELIST', '*' )
            cors.init_app( '${name}Api', origins = origins )

    app.register_blueprint( '${name}Api' )
    return

@${name}Api.route( "{uri}/list", methods=[ 'GET' ] )
def get${cls}List():
    recordList = db.session.query( ${cls} ).order_by( ${cls}.${primaryKeyField} ).all()
    result = ${name}sSchema.jsonify( recordList )
    logger.debug( 'get${cls}List() => {0}'.format( result ) )
    return result


@${name}Api.route( "{uri}/new", methods = [ 'POST' ] )
def api${cls}New():
    data    = request.json
    logging.info( 'POST: {0}'.format( repr( data ) ) )
    del data[ ${primaryKeyField} ]
    record = ${cls}( **request.json )
    db.session.add( record )
    db.session.commit()
    result = ${name}Schema.jsonify( role )
    logger.debug( 'get${cls}New() => {0}'.format( result ) )
    return result


@${name}Api.route( "{uri}/get", methods = [ 'GET' ] )
def api${cls}Get():
    data    = request.json
    logging.info( 'GET: {0}'.format( repr( data ) ) )
    record = ${cls}.query.get( int( data[ ${primaryKeyField} ] ) )
    result = ${name}Schema.jsonify( record )
    logger.debug( 'get${cls}Get() => {0}'.format( result ) )
    return result


@${name}Api.route( "{uri}/delete", methods = [ 'DELETE' ] )
def api${cls}Delete():
    data    = request.json
    logging.info( 'DELETE: {0}'.format( repr( data ) ) )
    record = ${cls}.query.get( int( data[ ${primaryKeyField} ] ) )
    db.session.delete( record )
    db.session.commit()
    result = ${name}Schema.jsonify( record )
    logger.debug( 'get${cls}Delete() => {0}'.format( result ) )
    return result


@${name}Api.route( "{uri}/put", methods=['PUT'] )
def api${cls}Put():
    data    = request.json
    logging.info( 'PUT: {0}'.format( repr( data ) ) )
    record = ${cls}.query.get( data[ ${primaryKeyField} ] )
    for key, value in data.items():
        if key != '${primaryKeyField}':
            setattr( record, key, value )

    db.session.commit()
    result = ${name}Schema.jsonify( record )
    logger.debug( 'get${cls}Put() => {0}'.format( result ) )
    return result


@${name}Api.route( "{uri}/update", methods=['PATCH'] )
def api${cls}Patch():
    data    = request.json
    logging.info( 'PATCH: {0}'.format( repr( data ) ) )
    record = ${cls}.query.get( data[ ${primaryKeyField} ] )
    for key, value in data.items():
        setattr( record, key, value )

    db.session.commit()
    result = ${name}Schema.jsonify( record )
    logger.debug( 'get${cls}Patch() => {0}'.format( result ) )
    return result