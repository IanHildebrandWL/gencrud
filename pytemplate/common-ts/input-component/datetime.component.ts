/*
*   Python backend and Angular frontend code generation by gencrud
*   Copyright (C) 2018 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
*
*   This library is free software; you can redistribute it and/or modify
*   it under the terms of the GNU Library General Public License GPL-2.0-only
*   as published by the Free Software Foundation; either version 2 of the
*   License, or (at your option) any later version.
*
*   This library is distributed in the hope that it will be useful, but
*   WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
*   Library General Public License for more details.
*
*   You should have received a copy of the GNU Library General Public
*   License GPL-2.0-only along with this library; if not, write to the
*   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
*   Boston, MA 02110-1301 USA
*
*   Frontend view for the ${ obj.name } table, this is generated by the
*   gencrud.py module. When modifing the file make sure that you remove
*   the table from the configuration.
*/
import { Component,
         Input, 
         forwardRef, 
         AfterViewInit, 
         OnChanges, 
         ViewEncapsulation, 
         OnInit,
         EventEmitter,
         Output } from '@angular/core';
import { NG_VALUE_ACCESSOR, 
         ControlValueAccessor, 
         FormGroupDirective,
         FormGroup,
         FormControl } from '@angular/forms';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { PytBaseComponent } from './base.input.component';
import { DateAdapter } from '@angular/material';
import * as moment_ from 'moment';


export const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef( () => PytDateTimeInputComponent ),
    multi: true
};

class DateConfig
{
    startView: 'month' | 'year' | 'multi-year';
    touchUi: boolean;
    minDate: moment_.Moment;
    maxDate: moment_.Moment;
}

@Component( {
  selector: 'pyt-datetime-input-box',
  template: `<div class="form" [formGroup]="timeFormGroup">
    <div fxLayout="row">
        <mat-form-field color="accent" fxFlex="45">
            <input id="{{ id }}_DATE"
                matInput [matDatepicker]="datepicker"
                placeholder="{{placeholderDate}}"
                formControlName="dateControl"
                [min]="config.minDate"
                [max]="config.maxDate"
                (dateChange)="dateChange( $event )">
            <mat-datepicker-toggle matSuffix [for]="datepicker">
            </mat-datepicker-toggle>
            <mat-datepicker #datepicker
                        [disabled]="disabled"
                        [touchUi]="config.touchUi"
                        startView="{{config.startView}}">
            </mat-datepicker>
            <mat-icon matPrefix *ngIf="prefixType == 'icon'">{{ prefix }}</mat-icon>
            <mat-icon matSuffix *ngIf="suffixType == 'icon'">{{ suffix }}</mat-icon>
            <span matPrefix *ngIf="prefixType == 'text'">{{ prefix }}</span>
            <span matSuffix *ngIf="suffixType == 'text'">{{ suffix }}</span>
        </mat-form-field>
        <span  fxFlex="10"></span>
        <mat-form-field color="accent" fxFlex="45">
            <input [ngxTimepicker]="timePicker"
                matInput

                [format]="24"
                placeholder="{{placeholderTime}}"
                formControlName="timeControl">
            <ngx-material-timepicker #timePicker
                (timeSet)="timeChange( $event )"
            ></ngx-material-timepicker>
            <ngx-material-timepicker-toggle matSuffix [for]="timePicker">
            </ngx-material-timepicker-toggle>
            <mat-icon matPrefix *ngIf="prefixType == 'icon'">{{ prefix }}</mat-icon>
            <mat-icon matSuffix *ngIf="suffixType == 'icon'">{{ suffix }}</mat-icon>
            <span matPrefix *ngIf="prefixType == 'text'">{{ prefix }}</span>
            <span matSuffix *ngIf="suffixType == 'text'">{{ suffix }}</span>
        </mat-form-field>
    <div>
</div>`,
  styles: [ 'custom-input__input{ width: 40%; float: left; }' ],
  encapsulation: ViewEncapsulation.None,
  providers: [ CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR ],
  animations: [ trigger(
      'visibilityChanged', [
        state( 'true', style( { 'height': '*', 'padding-top': '4px' } ) ),
        state( 'false', style( { height: '0px', 'padding-top': '0px' } ) ),
        transition( '*=>*', animate( '200ms' ) )
      ]
    )
  ]
} )
export class PytDateTimeInputComponent extends PytBaseComponent
{
    @Input() disabled: boolean;
    @Input() placeholderDate: string;
    @Input() placeholderTime: string;
    @Input() model: Date;
    @Input() purpose: string;
    @Input() dateOnly: boolean;

    @Output() dateUpdate = new EventEmitter<Date>();
    public timeFormGroup: FormGroup;
    public momentDate: moment_.Moment;
    public config: DateConfig;
    constructor( formGroupDir: FormGroupDirective,
                 private adapter : DateAdapter<any> )
    {
        super( formGroupDir );
        this.placeholderDate = "Select Date";
        this.placeholderTime = "Select Time";
        this.timeFormGroup = new FormGroup(
            { dateControl: new FormControl(),
              timeControl: new FormControl() }
        );
        this.adapter.setLocale("nl-NL");//todo: configurable
        this.config = new DateConfig();
        this.config.startView = 'month';
        this.config.maxDate = moment_().add('year', -5);
        this.config.minDate = moment_().add('year', +5);
        this.dateOnly = false;
        return;
    }

    ngOnInit()
    {
        super.ngOnInit();
        console.log( "ngOnInit PytDateTimeInputComponent" )
        console.log( '2019-11-29T16:12:00Z' )
        let dt:Date = new Date( '2019-11-29T16:12:00+00:00');
        console.log( "UtcDate:" + dt.toString() );
        let time:string = dt.toTimeString().substring( 0, 5 );
        console.log( "LocalDate NL:" + dt.toLocaleString( 'nl-NL' ) );
        console.log( "LocalDate:" + time );
        this.timeFormGroup.patchValue({ dateControl: dt,
                                        timeControl: time
        } );
        console.log( "Control", this.control.value );
    }

    timeChange( event )
    {
        console.log( "timeChange", this.timeFormGroup.get('timeControl') );
        console.log( "event", event );
        return;
    }

    dateChange( event )
    {
        console.log( "dateChange", this.timeFormGroup.get('dateControl') );
        console.log( "event", event );
        return;
    }
}
