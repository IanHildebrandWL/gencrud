/*
*   Do not edit this file, this file is generated by the gencrud.py module
*/
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MatDialog, MatPaginator, MatSort } from '@angular/material';
import { fromEvent } from 'rxjs';
import { UserRecord } from './model';
import { AddEditUserDialog } from './addedit.dialog';
import { DeleteUserDialog } from './delete.dialog';
import { UserDataService } from './service';
import { UserDataSource } from './datasource';

@Component({
    selector: 'app-user-table',
    templateUrl: './crud-table.component.html',
    styleUrls: ['./crud-table.component.scss']
})
export class UserTableComponent implements OnInit
{
    displayedColumns = [
                            D_USER_ID,
                            D_USER_NAME,
                            D_FIRST_NAME,
                            D_MIDDLE_NAME,
                            D_LAST_NAME,
                        ];

    dataSource:       UserDataSource  | null;
    index:            number;
    id:               number;

    constructor( public httpClient: HttpClient,
                 public dialog: MatDialog,
                 public dataService: UserDataService )
    {
        return;
    }

    @ViewChild( MatPaginator )  paginator: MatPaginator;
    @ViewChild( MatSort )       sort: MatSort;
    @ViewChild( 'filter' )      filter: ElementRef;

    ngOnInit() 
    {
        this.loadData();
        return;
    }

    refresh() 
    {
        this.loadData();
        return;
    }

    addNew() 
    {
        let record: UserRecord = new UserRecord;
        const dialogRef = this.dialog.open( AddEditUserDialog,
        {
            data: { record: record,
                    mode: 'add' },
        } );
        let height: number = ( 6 * 72 ) + 130;
        dialogRef.afterClosed().subscribe( result => 
        {
            console.log( "addNew() dialog result ", result );
            if ( result === 1 ) 
            {
                // After dialog is closed we're doing frontend updates
                // For add we're just pushing a new row inside DataService
                this.dataService.dataChange.value.push( this.dataService.getDialogData() );
                this.refreshTable();
            }
        } );
        dialogRef.updateSize( "85%", height.toString() + "px" );
        return;
    }

    startEdit( i: number, record: UserRecord )
    {
        this.dataService.lockRecord( record );
        this.id = record.D_USER_ID;
        // index row is used just for debugging proposes and can be removed
        this.index = i;      
        console.log( this.index );
        let height: number = ( 6 * 72 ) + 190;
        const dialogRef = this.dialog.open( AddEditUserDialog,
        {
            data: { record:     record, 
                    mode:       'edit' },
        } );
        dialogRef.updateSize( "85%", height.toString() + "px" );
        dialogRef.afterClosed().subscribe( result => 
        {
            console.log( "startEdit() dialog result ", result );
            if ( result === 1 ) 
            {
                // When using an edit things are little different,
                // firstly we find record inside DataService by id
                const foundIndex = this.dataService.dataChange.value.findIndex( x => x.D_USER_ID === this.id );
                console.log( "startEdit() updating index ", foundIndex );
                // Then you update that record using data from
                // dialogData (values you enetered)
                this.dataService.dataChange.value[ foundIndex ] = this.dataService.getDialogData();
                // And lastly refresh table
                this.refreshTable();
            }
            else
            {
                this.dataService.unlockRecord( record );
            }
        } );
        return;
    }

    deleteItem( i: number, record: UserRecord )
    {
        this.dataService.lockRecord( record );
        this.id = record.D_USER_ID;
        console.log( "deleteItem ", record );
        const dialogRef = this.dialog.open( DeleteUserDialog,
        {
            data: { record: record, 
                    mode: 'delete' }
        } );

        dialogRef.afterClosed().subscribe( result => 
        {
            console.log( "deleteItem() dialog result ", result );
            if ( result === 1 ) 
            {
                const foundIndex = this.dataService.dataChange.value.findIndex( x =>
                                    x.D_USER_ID === this.id );
                console.log( "deleteItem() removing index ", foundIndex );
                this.dataService.dataChange.value.splice( foundIndex, 1 );
                this.refreshTable();
            }
            else
            {
                this.dataService.unlockRecord( record );
            }
        } );
        return;
    }

    private refreshTable() 
    {
        this.paginator._changePageSize( this.paginator.pageSize );
        return;
    }

    public loadData() 
    {
        this.dataSource = new UserDataSource( this.dataService,
                                                this.paginator,
                                                this.sort );
        fromEvent( this.filter.nativeElement, 'keyup' ).subscribe( () => {
            if ( !this.dataSource ) 
            {
                return;
            }
            this.dataSource.filter = this.filter.nativeElement.value;
        });
    }
}
