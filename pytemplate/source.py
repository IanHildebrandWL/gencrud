#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   Frontend view for the ${ obj.name } table, this is generated by the
#   gencrud.py module. When modifing the file make sure that you remove
#   the table from the configuration.
#
import os
import logging
import pathlib
from pytemplate.util.exceptions import MissingTemplate

logger = logging.getLogger()


class TemplateSource( object ):
    def __init__( self, type, current_path, **cfg ):
        if 'templates' in cfg:
            if pathlib.Path( cfg[ 'templates' ][ type ] ).is_absolute():
                self.__template = os.path.abspath( cfg[ 'templates' ][ type ] )

            else:
                self.__template = os.path.abspath( os.path.join( current_path, cfg[ 'templates' ][ type ] ) )

        else:
            self.__template = os.path.abspath( os.path.join( os.path.dirname( __file__ ), 'templates', type ) )

        logger.info( 'Template folder: {0}'.format( self.__template ) )
        cnt = 0
        for templ_file in os.listdir( self.__template ):
            if os.path.splitext( templ_file )[ 1 ] == '.templ':
                cnt += 1

        if cnt == 0:
            raise MissingTemplate( self.__template )

        if pathlib.Path( cfg[ 'source' ][ type ] ).is_absolute():
            self.__source   = os.path.abspath( cfg[ 'source' ][ type ] )

        else:
            self.__source   = os.path.abspath( os.path.join( current_path, cfg[ 'source' ][ type ] ) )

        return

    @property
    def source( self ):
        return self.__source

    @property
    def template( self ):
        return self.__template

